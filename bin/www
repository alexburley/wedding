#!/usr/bin/env node

const app = require("../app");
const debug = require("debug")("wedding:server");
const env = require("../env");

const fs = require("fs");
const https = require("https");
const key = fs.readFileSync(__dirname + "/../certs/wedding.key");
const cert = fs.readFileSync(__dirname + "/../certs/wedding.crt");
const options = {
  key: key,
  cert: cert,
  passphrase: env.passphrase,
};

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);
console.log("Listening on port: ", port);

const server = https.createServer(options, app);

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
